<?php

/**
 * @file
 * General functionality for crownpeak.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Routing\RouteMatchInterface;

define('CROWNPEAK_JS_PATH', 'public://js');

/**
 * Implements hook_help().
 */
function crownpeak_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.crownpeak':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Crownpeak Accessibility provides an integration with crownpeak service.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function crownpeak_theme() {
  return [
    'crownpeak_js' => [
      'variables' => [
        'crownpeak_configs' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 *
 * Insert JavaScript to the appropriate scope/region of the page.
 */
function crownpeak_page_attachments(array &$page) {
  $account = \Drupal::currentUser();
  if (_crownpeak_visibility_roles($account) || _crownpeak_visibility_pages()) {
    $page['#attached']['library'][] = 'crownpeak/crownpeak.js';
  }
}


/**
 * Implements hook_js_alter().
 */
function crownpeak_js_alter(&$javascript, AttachedAssetsInterface $assets) {
  foreach ($javascript as $key => $script) {
    if (strpos($key, '[crownpeak_js_placeholder]') !== FALSE) {
      $crownpeak_js_suffix = \Drupal::state()->get('crownpeak_js_suffix') ?: NULL;
      $crownpeak_current_js = CROWNPEAK_JS_PATH . '/crownpeak_' . $crownpeak_js_suffix . '.js';
      $javascript[$key]['data'] = file_url_transform_relative(file_create_url($crownpeak_current_js));
    }
  }
}

/**
 * Implements hook_rebuild().
 */
function crownpeak_rebuild() {
  crownpeak_generate_js();
}

/**
 * Build JS based on form settings.
 */
function crownpeak_generate_js() {
  $configs = \Drupal::config('crownpeak.settings');
  $js_path = CROWNPEAK_JS_PATH;

  // Rendering JS based on form settings.
  $render_array_js = [
    '#theme' => 'crownpeak_js',
    '#crownpeak_configs' => [
      'accessibility_statement_link' => $configs->get('accessibility_statement_link'),
      'feedback_form_link' => $configs->get('feedback_form_link'),
      'hide_trigger_button' => $configs->get('hide_trigger_button'),
      'interface_language' => $configs->get('interface_language'),
      'interface_lead_color' => $configs->get('interface_lead_color'),
      'trigger_button_color' => $configs->get('trigger_button_color'),
      'interface_position' => $configs->get('interface_position'),
      'show_on_mobile' => $configs->get('show_on_mobile'),
      'trigger_horizontal_position' => $configs->get('trigger_horizontal_position'),
      'trigger_vertical_position' => $configs->get('trigger_vertical_position'),
      'mobile_trigger_horizontal_position' => $configs->get('mobile_trigger_horizontal_position'),
      'mobile_trigger_vertical_position' => $configs->get('mobile_trigger_vertical_position'),
      'trigger_button_size' => $configs->get('trigger_button_size'),
      'mobile_trigger_size' => $configs->get('mobile_trigger_size'),
      'trigger_button_shape' => $configs->get('trigger_button_shape'),
      'mobile_trigger_shape' => $configs->get('mobile_trigger_shape'),
      'trigger_button_icon' => $configs->get('trigger_button_icon'),
      'trigger_horizontal_offset' => $configs->get('trigger_horizontal_offset'),
      'trigger_vertical_offset' => $configs->get('trigger_vertical_offset'),
      'mobile_trigger_horizontal_offset' => $configs->get('mobile_trigger_horizontal_offset'),
      'mobile_trigger_vertical_offset' => $configs->get('mobile_trigger_vertical_offset'),
    ],
  ];

  $renderer = \Drupal::service('renderer');
  $crownpeak_js = $renderer->renderPlain($render_array_js);

  // Generate suffix for new js file.
  $js_suffix = \Drupal::time()->getRequestTime();

  // Delete old js file if exists.
  $js_old_suffix = \Drupal::state()->get('crownpeak_js_suffix') ?: NULL;
  if ($js_old_suffix) {
    \Drupal::service('file_system')->delete($js_path . '/crownpeak_' . $js_old_suffix . '.js');
  }

  // Save suffix to db.
  \Drupal::state()->set('crownpeak_js_suffix', $js_suffix);

  // Save the JS to a file in the files directory.
  // make directory writable if it is read-only.
  \Drupal::service('file_system')->prepareDirectory($js_path, FileSystemInterface::MODIFY_PERMISSIONS);
  \Drupal::service('file_system')->saveData($crownpeak_js, $js_path . '/crownpeak_' . $js_suffix . '.js', FileSystemInterface::EXISTS_REPLACE);

  // We should flush JS cache so that aggregated JS gets rebuilt.
  \Drupal::service('asset.js.collection_optimizer')->deleteAll();
  _drupal_flush_css_js();
}

/**
 * Checking visibility for user roles.
 *
 * Based on visibility setting this function returns TRUE if JS code should
 * be added for the current role and otherwise FALSE.
 *
 * @param object $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if JS code should be added for the current role and otherwise FALSE.
 */
function _crownpeak_visibility_roles($account) {
  $config = \Drupal::config('crownpeak.settings');
  $enabled = $visibility_user_role_mode = $config->get('visibility_user_role_mode');
  $visibility_user_role_roles = $config->get('visibility_user_role_roles');
  if (count($visibility_user_role_roles) > 0) {
    // One or more roles are selected.
    foreach (array_values($account->getRoles()) as $user_role) {
      // Is the current user a member of one of these roles?
      if (in_array($user_role, $visibility_user_role_roles)) {
        // Current user is a member of a role widget should be shown/excluded
        // from tracking.
        $enabled = !$visibility_user_role_mode;
        break;
      }
    }
  }
  else {
    // No role is selected for showing widget, therefore all roles should be
    // tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Checking visibility check for pages.
 *
 * Based on visibility setting this function returns TRUE if JS code should
 * be added to the current page and otherwise FALSE.
 */
function _crownpeak_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {
    $config = \Drupal::config('crownpeak.settings');
    $visibility_request_path_mode = $config->get('visibility_request_path_mode');
    $visibility_request_path_pages = $config->get('visibility_request_path_pages');

    // Match path if necessary.
    if (!empty($visibility_request_path_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = mb_strtolower($visibility_request_path_pages);
      if ($visibility_request_path_mode < 2) {
        // Compare the lowercase path alias (if any) and internal path.
        $path = \Drupal::service('path.current')->getPath();
        $path_alias = mb_strtolower(\Drupal::service('path_alias.manager')->getAliasByPath($path));
        $page_match = \Drupal::service('path.matcher')->matchPath($path_alias, $pages) || (($path != $path_alias) && \Drupal::service('path.matcher')->matchPath($path, $pages));
        // When $visibility_request_path_mode has a value of 0, the tracking
        // code is displayed on all pages except those listed in $pages. When
        // set to 1, it is displayed only on those pages listed in $pages.
        $page_match = !($visibility_request_path_mode xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}
